declare module 'PDFIX_WASM' {

enum PdfAuthPlatform {
"kAuthPlatformWin" = 0,
"kAuthPlatformMac" = 1,
"kAuthPlatformLinux" = 2,
"kAuthPlatformAndroid" = 3,
"kAuthPlatformiOS" = 4,
"kAuthPlatformServer" = 5,
}

enum PdfAuthOption {
"kAuthOptionBasic" = 0,
"kAuthOptionProfessional" = 1,
"kAuthOptionEnterprise" = 2,
"kAuthOptionDeveloper" = 3,
"kAuthOptionTrial" = 4,
"kAuthOptionLite" = 5,
}

enum PdfEventType {
"kEventUnknown" = 0,
"kEventDocWillSave" = 1,
"kEventDocWillClose" = 2,
"kEventDocDidOpen" = 3,
"kEventDocDidSave" = 4,
"kEventDocWillChangePages" = 5,
"kEventDocDidChangePages" = 6,
"kEventDocWillDeletePages" = 7,
"kEventDocDidDeletePages" = 8,
"kEventDocWillInsertPages" = 9,
"kEventDocDidInsertPages" = 10,
"kEventDocWillMovePages" = 11,
"kEventDocDidMovePages" = 12,
"kEventDocWillReplacePages" = 13,
"kEventDocDidReplacePages" = 14,
"kEventDocWillChangeFlags" = 15,
"kEventDocDidChangeFlags" = 16,
"kEventAnnotWillChange" = 17,
"kEventAnnotDidChange" = 18,
"kEventPageWillAddAnnot" = 19,
"kEventPageWillRemoveAnnot" = 20,
"kEventPageDidAddAnnot" = 21,
"kEventPageDidRemoveAnnot" = 22,
"kEventPageContentWillChange" = 23,
"kEventPageContentDidChange" = 24,
"kEventPageContentWillWrite" = 25,
"kEventPageContentDidWrite" = 26,
"kEventFormFieldWillChange" = 27,
"kEventFormFieldDidChange" = 28,
"kEventProgressDidChange" = 29,
"kEventBookmarkWillChange" = 30,
"kEventBookmarkDidChange" = 31,
"kEventBookmarkWillRemove" = 32,
"kEventBookmarkDidRemove" = 33,
"kEventBookmarkDidCreate" = 34,
"kEventBookmarkDidChangePosition" = 35,
"kEventUndoDidCreate" = 36,
"kEventUndoWillExecute" = 37,
"kEventUndoDidExecute" = 38,
"kEventUndoWillDestroy" = 39,
"kEventPageMapWillChange" = 40,
"kEventPageMapDidChange" = 41,
"kEventStructTreeWillCreate" = 42,
"kEventStructTreeDidCreate" = 43,
"kEventStructTreeWillRemove" = 44,
"kEventStructTreeDidRemove" = 45,
"kEventStructElementWillAdd" = 46,
"kEventStructElementDidAdd" = 47,
"kEventStructElementWillChange" = 48,
"kEventStructElementDidChange" = 49,
"kEventStructElementChildWillRemove" = 50,
"kEventStructElementChildDidRemove" = 51,
"kEventDocTemplateWillChange" = 52,
"kEventDocTemplateDidChange" = 53,
"kEventObjectWillChange" = 54,
"kEventObjectDidChange" = 55,
"kEventObjectWillDestroy" = 56,
"kEventDidCreate" = 57,
"kEventWillDestroy" = 58,
"kEventWillChange" = 59,
"kEventDidChange" = 60,
"kEventWillWrite" = 61,
"kEventDidWrite" = 62,
}

enum PdfDigSigValidState {
"kDigSigBlank" = 0,
"kDigSigUnknown" = 1,
"kDigSigInvalid" = 2,
"kDigSigValid" = 3,
"kDigSigDoubleChecked" = 4,
"kDigSigValidStateEnumSize" = 5,
}

enum PdfAlignment {
"kAlignmentNone" = 0,
"kAlignmentLeft" = 1,
"kAlignmentRight" = 2,
"kAlignmentJustify" = 3,
"kAlignmentTop" = 4,
"kAlignmentBottom" = 5,
"kAlignmentCenter" = 6,
}

enum PdfRotate {
"kRotate0" = 0,
"kRotate90" = 90,
"kRotate180" = 180,
"kRotate270" = 270,
}

enum PdfObjectType {
"kPdsUnknown" = 0,
"kPdsBoolean" = 1,
"kPdsNumber" = 2,
"kPdsString" = 3,
"kPdsName" = 4,
"kPdsArray" = 5,
"kPdsDictionary" = 6,
"kPdsStream" = 7,
"kPdsNull" = 8,
"kPdsReference" = 9,
}

enum PdfPageObjectType {
"kPdsPageUnknown" = 0,
"kPdsPageText" = 1,
"kPdsPagePath" = 2,
"kPdsPageImage" = 3,
"kPdsPageShading" = 4,
"kPdsPageForm" = 5,
}

enum PdfElementType {
"kPdeUnknown" = 0,
"kPdeText" = 1,
"kPdeTextLine" = 2,
"kPdeWord" = 3,
"kPdeTextRun" = 4,
"kPdeImage" = 5,
"kPdeContainer" = 6,
"kPdeList" = 7,
"kPdeLine" = 8,
"kPdeRect" = 9,
"kPdeTable" = 10,
"kPdeCell" = 11,
"kPdeToc" = 12,
"kPdeFormField" = 13,
"kPdeHeader" = 14,
"kPdeFooter" = 15,
"kPdeArtifact" = 16,
"kPdeAnnot" = 17,
}

enum PdfContainerType {
"kPdeContainerUnknown" = 0,
"kPdeContainerPage" = 1,
"kPdeContainerCol" = 2,
"kPdeContainerRow" = 3,
"kPdeContainerSplitter" = 4,
}

enum PdfTagType {
"kTagUnknown" = 0,
"kTagSect" = 1,
"kTagArt" = 2,
}

enum PdfLineCap {
"kPdfLineCapButt" = 0,
"kPdfLineCapRound" = 1,
"kPdfLineCapSquare" = 2,
}

enum PdfLineJoin {
"kPdfLineJoinMiter" = 0,
"kPdfLineJoinRound" = 1,
"kPdfLineJoinBevel" = 2,
}

enum PdfFillType {
"kFillTypeNone" = 0,
"kFillTypeSolid" = 1,
"kFillTypePattern" = 2,
}

enum PdfTextAlignment {
"kTextAlignmentNone" = 0,
"kTextAlignmentLeft" = 1,
"kTextAlignmentRight" = 2,
"kTextAlignmentCenter" = 3,
"kTextAlignmentJustify" = 4,
}

enum PdfAnnotSubtype {
"kAnnotUnknown" = 0,
"kAnnotText" = 1,
"kAnnotLink" = 2,
"kAnnotFreeText" = 3,
"kAnnotLine" = 4,
"kAnnotSquare" = 5,
"kAnnotCircle" = 6,
"kAnnotPolygon" = 7,
"kAnnotPolyLine" = 8,
"kAnnotHighlight" = 9,
"kAnnotUnderline" = 10,
"kAnnotSquiggly" = 11,
"kAnnotStrikeOut" = 12,
"kAnnotStamp" = 13,
"kAnnotCaret" = 14,
"kAnnotInk" = 15,
"kAnnotPopup" = 16,
"kAnnotFileAttachment" = 17,
"kAnnotSound" = 18,
"kAnnotMovie" = 19,
"kAnnotWidget" = 20,
"kAnnotScreen" = 21,
"kAnnotPrinterMark" = 22,
"kAnnotTrapNet" = 23,
"kAnnotWatermark" = 24,
"kAnnot3D" = 25,
"kAnnotRedact" = 26,
}

enum PdfBorderStyle {
"kBorderSolid" = 0,
"kBorderDashed" = 1,
"kBorderBeveled" = 2,
"kBorderInset" = 3,
"kBorderUnderline" = 4,
}

enum PdfFieldType {
"kFieldUnknown" = 0,
"kFieldButton" = 1,
"kFieldRadio" = 2,
"kFieldCheck" = 3,
"kFieldText" = 4,
"kFieldCombo" = 5,
"kFieldList" = 6,
"kFieldSignature" = 7,
}

enum PdfActionEventType {
"kActionEventAnnotEnter" = 0,
"kActionEventAnnotExit" = 1,
"kActionEventAnnotMouseDown" = 2,
"kActionEventAnnotMouseUp" = 3,
"kActionEventAnnotFocus" = 4,
"kActionEventAnnotBlur" = 5,
"kActionEventAnnotPageOpen" = 6,
"kActionEventAnnotPageClose" = 7,
"kActionEventAnnotPageVisible" = 8,
"kActionEventAnnotPageInvisible" = 9,
"kActionEventPageOpen" = 10,
"kActionEventPageClose" = 11,
"kActionEventFieldKeystroke" = 12,
"kActionEventFieldFormat" = 13,
"kActionEventFieldValidate" = 14,
"kActionEventFieldCalculate" = 15,
"kActionEventDocWillClose" = 16,
"kActionEventDocWillSave" = 17,
"kActionEventDocDidSave" = 18,
"kActionEventDocWillPrint" = 19,
"kActionEventDocDidPrint" = 20,
"kActionEventDocOpen" = 21,
}

enum PdfActionType {
"kActionUnknown" = 0,
"kActionGoTo" = 1,
"kActionGoToR" = 2,
"kActionGoToE" = 3,
"kActionLaunch" = 4,
"kActionThread" = 5,
"kActionURI" = 6,
"kActionSound" = 7,
"kActionMovie" = 8,
"kActionHide" = 9,
"kActionNamed" = 10,
"kActionSubmitForm" = 11,
"kActionResetForm" = 12,
"kActionImportData" = 13,
"kActionJavaScript" = 14,
"kActionSetOCGState" = 15,
"kActionRendition" = 16,
"kActionTrans" = 17,
"kActionGoTo3DView" = 18,
}

enum PdfImageFormat {
"kImageFormatUnknown" = 0,
"kImageFormatPng" = 1,
"kImageFormatJpg" = 2,
"kImageFormatBmp" = 3,
"kImageFormatEmf" = 4,
"kImageFormatTiff" = 5,
}

enum PdfFontCharset {
"kFontAnsiCharset" = 0,
"kFontDefaultCharset" = 1,
"kFontSymbolCharset" = 2,
"kFontUnknownCharset" = 3,
"kFontMacintoshCharset" = 77,
"kFontShiftJISCharset" = 128,
"kFontHangeulCharset" = 129,
"kFontKoreanCharset" = 130,
"kFontGB2312Charset" = 134,
"kFontCHineseBig5Charset" = 136,
"kFontGreekCharset" = 161,
"kFontTurkishCharset" = 162,
"kFontVietnameseCharset" = 163,
"kFontHebrewCharset" = 177,
"kFontArabicCharset" = 178,
"kFontArabicTCharset" = 179,
"kFontArabicUCharset" = 180,
"kFontHebrewUCharset" = 181,
"kFontBalticCharset" = 186,
"kFontRussianCharset" = 204,
"kFontThaiCharset" = 222,
"kFontEastEuropeCharset" = 238,
}

enum PdfFontCodepage {
"kFontDefANSICodepage" = 0,
"kFontSymbolCodepage" = 42,
"kFontMSDOSUSCodepage" = 437,
"kFontArabicASMO708Codepage" = 708,
"kFontMSDOSGreek1Codepage" = 737,
"kFontMSDOSBalticCodepage" = 775,
"kFontMSDOSWesternEuropeanCodepage" = 850,
"kFontMSDOSEasternEuropeanCodepage" = 852,
"kFontMSDOSCyrillicCodepage" = 855,
"kFontMSDOSTurkishCodepage" = 857,
"kFontMSDOSPortugueseCodepage" = 860,
"kFontMSDOSIcelandicCodepage" = 861,
"kFontMSDOSHebrewCodepage" = 862,
"kFontMSDOSFrenchCanadianCodepage" = 863,
"kFontMSDOSArabicCodepage" = 864,
"kFontMSDOSNorwegianCodepage" = 865,
"kFontMSDOSRussianCodepage" = 866,
"kFontMSDOSGreek2Codepage" = 869,
"kFontMSDOSThaiCodepage" = 874,
"kFontShiftJISCodepage" = 932,
"kFontChineseSimplifiedCodepage" = 936,
"kFontHangulCodepage" = 949,
"kFontChineseTraditionalCodepage" = 950,
"kFontUTF16LECodepage" = 1200,
"kFontUTF16BECodepage" = 1201,
"kFontMSWinEasternEuropeanCodepage" = 1250,
"kFontMSWinCyrillicCodepage" = 1251,
"kFontMSWinWesternEuropeanCodepage" = 1252,
"kFontMSWinGreekCodepage" = 1253,
"kFontMSWinTurkishCodepage" = 1254,
"kFontMSWinHebrewCodepage" = 1255,
"kFontMSWinArabicCodepage" = 1256,
"kFontMSWinBalticCodepage" = 1257,
"kFontMSWinVietnameseCodepage" = 1258,
"kFontJohabCodepage" = 1361,
"kFontMACRomanCodepage" = 10000,
"kFontMACShiftJISCodepage" = 10001,
"kFontMACChineseTraditionalCodepage" = 10002,
"kFontMACKoreanCodepage" = 10003,
"kFontMACArabicCodepage" = 10004,
"kFontMACHebrewCodepage" = 10005,
"kFontMACGreekCodepage" = 10006,
"kFontMACCyrillicCodepage" = 10007,
"kFontMACChineseSimplifiedCodepage" = 10008,
"kFontMACThaiCodepage" = 10021,
"kFontMACEasternEuropeanCodepage" = 10029,
"kFontMACTurkishCodepage" = 10081,
"kFontUTF8Codepage" = 65001,
}

enum PdfFontType {
"kFontUnknownType" = 0,
"kFontType1" = 1,
"kFontTrueType" = 2,
"kFontType3" = 3,
"kFontCIDFont" = 4,
}

enum PdfFontFormat {
"kFontFormatTtf" = 0,
"kFontFormatWoff" = 1,
}

enum PdfDestZoomType {
"kPdfZoomXYZ" = 1,
"kPdfZoomFitPage" = 2,
"kPdfZoomFitHorz" = 3,
"kPdfZoomFitVert" = 4,
"kPdfZoomFitRect" = 5,
"kPdfZoomFitBbox" = 6,
"kPdfZoomFitBHorz" = 7,
"kPdfZoomFitBVert" = 8,
}

enum PdfDigSigType {
"kDigSigOpenSSL" = 0,
"kDigSigCert" = 1,
"kDigSigCustom" = 2,
}

enum PdfImageType {
"kImageFigure" = 0,
"kImageImage" = 1,
"kImagePath" = 2,
"kImageRect" = 3,
"kImageShading" = 4,
"kImageForm" = 5,
}

enum PdfListType {
"kListNone" = 0,
"kListUnordered" = 1,
"kListOrdered" = 2,
"kListDisc" = 3,
"kListCircle" = 4,
"kListSquare" = 5,
"kListDecimal" = 6,
"kListRomanUpper" = 7,
"kListRomanLower" = 8,
"kListLetterUpper" = 9,
"kListLetterLower" = 10,
"kListDescription" = 11,
}

enum PdfTextStyle {
"kTextNormal" = 0,
"kTextH1" = 1,
"kTextH2" = 2,
"kTextH3" = 3,
"kTextH4" = 4,
"kTextH5" = 5,
"kTextH6" = 6,
"kTextH7" = 7,
"kTextH8" = 8,
"kTextNote" = 9,
"kTextTitle" = 10,
}

enum PsFileMode {
"kPsWrite" = 0,
"kPsReadOnly" = 1,
"kPsTruncate" = 2,
}

enum PdfAlternateType {
"kAlternatePdf" = 0,
"kAlternateHtml" = 1,
}

enum PdfMediaType {
"kCSSMediaTypeAll" = 0,
"kCSSMediaTypePrint" = 1,
"kCSSMediaTypeScreen" = 2,
"kCSSMediaTypeSpeech" = 3,
}

enum PsImageDIBFormat {
"kImageDIBFormatRgb32" = 32,
"kImageDIBFormatArgb" = 544,
}

enum PsDataFormat {
"kDataFormatJson" = 0,
"kDataFormatXml" = 1,
"kDataFormatTxt" = 2,
}

enum PsRenderDeviceType {
"kRenderDeviceTypeGDI" = 0,
"kRenderDeviceTypeDirectX" = 1,
}

enum PdfStreamType {
"kFileStream" = 0,
"kMemoryStream" = 1,
"kProcStream" = 2,
}

enum PdfStructElementType {
"kPdsStructChildInvalid" = 0,
"kPdsStructChildElement" = 1,
"kPdsStructChildPageContent" = 2,
"kPdsStructChildStreamContent" = 3,
"kPdsStructChildObject" = 4,
}

enum PdfAuthorizationType {
"kAuthorizationStandard" = 0,
"kAuthorizationAccount" = 1,
}

enum PdfDestFitType {
"kDestFitUnknown" = 0,
"kDestFitXYZ" = 1,
"kDestFit" = 2,
"kDestFitH" = 3,
"kDestFitV" = 4,
"kDestFitR" = 5,
"kDestFitB" = 6,
"kDestFitBH" = 7,
"kDestFitBV" = 8,
}

enum PdfLabelType {
"kLabelNo" = -1,
"kLabelNone" = 0,
"kLabel" = 1,
"kLabelLevel1" = 2,
"kLabelLevel2" = 3,
"kLabelLevel3" = 4,
"kLabelLevel4" = 5,
}

enum PdfAnnotAppearanceMode {
"kAppearanceNormal" = 0,
"kAppearanceRollover" = 1,
"kAppearanceDown" = 2,
}

enum PdsPathPointType {
"kPathLineTo" = 0,
"kPathBezierTo" = 1,
"kPathMoveTo" = 2,
}

enum PdfBlendMode {
"kBlendModeNormal" = 0,
"kBlendModeMultiply" = 1,
"kBlendModeScreen" = 2,
"kBlendModeOverlay" = 3,
"kBlendModeDarken" = 4,
"kBlendModeLighten" = 5,
"kBlendModeColorDodge" = 6,
"kBlendModeColorBurn" = 7,
"kBlendModeHardLight" = 8,
"kBlendModeSoftLight" = 9,
"kBlendModeDifference" = 10,
"kBlendModeExclusion" = 11,
"kBlendModeHue" = 21,
"kBlendModeSaturation" = 22,
"kBlendModeColor" = 23,
"kBlendModeLuminosity" = 24,
}

enum PdfFillRule {
"kFillRuleNone" = 0,
"kFillRuleEvenOdd" = 1,
"kFillRuleWinding" = 2,
}

enum PdfColorSpaceFamily {
"kColorSpaceUnknown" = 0,
"kColorSpaceDeviceGray" = 1,
"kColorSpaceDeviceRGB" = 2,
"kColorSpaceDeviceCMYK" = 3,
"kColorSpaceCalGray" = 4,
"kColorSpaceCalRGB" = 5,
"kColorSpaceLab" = 6,
"kColorSpaceICCBase" = 7,
"kColorSpaceSeparation" = 8,
"kColorSpaceDeviceN" = 9,
"kColorSpaceIndexed" = 10,
"kColorSpacePattern" = 11,
}

enum PdfWordFinderAlgorithm {
"kWordFinderAlgLatest" = -1,
"kWordFinderAlgBasic" = 0,
}

enum PdfPermissionLevel {
"kPermissionLevelUser" = 0,
"kPermissionLevelOwner" = 1,
}

enum PdfStandardEncryptionMethod {
"kStandardEncryptionMethodNone" = 0,
"kStandardEncryptionMethodRC4v2" = 1,
"kStandardEncryptionMethodAESv1" = 2,
"kStandardEncryptionMethodAESv2" = 3,
}

enum PdfHtmlType {
"kPdfHtmlFixed" = 0,
"kPdfHtmlResponsive" = 1,
"kPdfHtmlDerivation" = 2,
}

enum PdfEnumResultType {
"kEnumResultError" = 0,
"kEnumResultOk" = 1,
"kEnumResultContinue" = 2,
"kEnumResultContinueSkip" = 3,
}

enum PdfSelectionType {
"kPdfSelectionUnknown" = 0,
"kPdfSelectionPageObject" = 1,
"kPdfSelectionPage" = 2,
"kPdfSelectionStructElement" = 3,
"kPdfSelectionAnnot" = 4,
"kPdfSelectionFont" = 5,
}

enum PsCommandType {
"kActionBase" = 0,
"kActionMakeAccessible" = 1,
"kActionAutofix" = 2,
"kActionQuickfix" = 3,
"kActionLast" = 4,
}

enum PdfixEnum {
"kSaveIncremental" = 0,
"kSaveFull" = 1,
"kSaveUncompressed" = 2,
"kSaveCompressedStructureOnly" = 4,
"kSaveIncludeComments" = 256,
"kDocNeedsSave" = 1,
"kDocNeedsFullSave" = 3,
"kDocIsModified" = 4,
"kDocIsClosing" = 8,
"kPageContentIsModified" = 1,
"kAnnotFlagNone" = 0,
"kAnnotFlagInvisible" = 1,
"kAnnotFlagHidden" = 2,
"kAnnotFlagPrint" = 4,
"kAnnotFlagNoZoom" = 8,
"kAnnotFlagNoRotate" = 16,
"kAnnotFlagNoView" = 32,
"kAnnotFlagReadOnly" = 64,
"kAnnotFlagLocked" = 128,
"kAnnotFlagToggleNoView" = 256,
"kAnnotFlagLockedContents" = 512,
"kRemoveAnnotSingle" = 0,
"kRemoveAnnotPopup" = 1,
"kRemoveAnnotReply" = 2,
"kTextFlagNone" = 0,
"kTextFlagUnderline" = 1,
"kTextFlagStrikeout" = 2,
"kTextFlagHighlight" = 4,
"kTextFlagSubscript" = 8,
"kTextFlagSuperscript" = 16,
"kTextFlagNoUnicode" = 32,
"kTextFlagPatternFill" = 64,
"kTextFlagPatternStroke" = 128,
"kTextFlagWhiteSpace" = 256,
"kTextFlagUnicode" = 512,
"kFieldFlagNone" = 0,
"kFieldFlagReadOnly" = 1,
"kFieldFlagRequired" = 2,
"kFieldFlagNoExport" = 4,
"kFieldFlagMultiline" = 4096,
"kFieldFlagPassword" = 8192,
"kFieldFlagNoToggleToOff" = 16384,
"kFieldFlagRadio" = 32768,
"kFieldFlagPushButton" = 65536,
"kFieldFlagCombo" = 2097152,
"kFieldFlagEdit" = 4194304,
"kFieldFlagSort" = 8388608,
"kFieldFlagMultiSelect" = 2097152,
"kFieldFlagDoNotSpellCheck" = 4194304,
"kFieldFlagDCommitOnSelChange" = 67108864,
"kFieldFlagFileSelect" = 1048576,
"kFieldFlagDoNotScroll" = 8388608,
"kFieldFlagComb" = 16777216,
"kFieldFlagRichText" = 33554432,
"kFieldFlagRadiosInUnison" = 33554432,
"kRenderAnnot" = 1,
"kRenderLCDText" = 2,
"kRenderNoNativeText" = 4,
"kRenderGrayscale" = 8,
"kRenderLimitedCache" = 16,
"kRenderForceHalftone" = 32,
"kRenderPrinting" = 64,
"kRenderNoText" = 128,
"kRenderNoBackground" = 256,
"kRenderBorder" = 512,
"kFontFixedPitch" = 1,
"kFontSerif" = 2,
"kFontSymbolic" = 4,
"kFontScript" = 8,
"kFontNotSymbolic" = 32,
"kFontItalic" = 64,
"kFontAllCap" = 65536,
"kFontSmallCap" = 131072,
"kFontForceBold" = 262144,
"kContentImage" = 1,
"kContentText" = 2,
"kContentPath" = 4,
"kContentForm" = 8,
"kContentShading" = 32,
"kContentTextTransparent" = 64,
"kContentTextFill" = 128,
"kContentTextStroke" = 256,
"kFontCreateNormal" = 0,
"kFontCreateEmbedded" = 1,
"kFontCreateSubset" = 2,
"kFontCreateDoNotEmbed" = 4,
"kFontCreateEncodeByGID" = 8,
"kFontCreateDeferWidths" = 16,
"kFontCreateGIDOverride" = 32,
"kFontCreateToUnicode" = 64,
"kFontCreateAllWidths" = 128,
"kFontCreateEmbedOpenType" = 256,
"kTableUnknown" = 0,
"kTableGraphic" = 1,
"kTableIsolated" = 2,
"kTableIsolatedCol" = 4,
"kTableIsolatedRow" = 8,
"kTableForm" = 16,
"kTableElement" = 32,
"kTableToc" = 64,
"kWordFlagHyphen" = 1,
"kWordFlagBullet" = 2,
"kWordFlagColon" = 4,
"kWordFlagNumber" = 8,
"kWordFlagSubscript" = 16,
"kWordFlagSupercript" = 32,
"kWordFlagTerminal" = 64,
"kWordFlagFirstCap" = 128,
"kWordFlagImage" = 256,
"kWordFlagNumberingDecimal" = 512,
"kWordFlagNumberingRoman" = 1024,
"kWordFlagNumberingLetter" = 2048,
"kWordFlagPageNumber" = 4096,
"kWordFlagFilling" = 8192,
"kWordFlagAllCaps" = 16384,
"kWordFlagComma" = 32768,
"kWordFlagNoUnicode" = 65536,
"kWordFlagLabel" = 131072,
"kWordFlagLabelLetter" = 262144,
"kWordFlagLabelNum" = 524288,
"kWordFlagLabelRomanNum" = 1048576,
"kWordFlagCurrency" = 2097152,
"kWordFlagMathSymbol" = 4194304,
"kTextLineFlagHyphen" = 1,
"kTextLineFlagNewLine" = 2,
"kTextLineFlagIndent" = 4,
"kTextLineFlagTerminal" = 8,
"kTextLineFlagDropCap" = 16,
"kTextLineFlagFilling" = 32,
"kTextLineFlagAllCaps" = 64,
"kTextLineFlagNoNewLine" = 128,
"kTextFlagTableCaption" = 1,
"kTextFlagImageCaption" = 2,
"kTextFlagChartCaption" = 4,
"kTextFlagNoteCaption" = 8,
"kTextFlagFilling" = 16,
"kTextFlagAllCaps" = 32,
"kTextFlagNewLine" = 64,
"kTextFlagNoNewLine" = 128,
"kCellScopeNone" = 0,
"kCellScopeRow" = 1,
"kCellScopeCol" = 2,
"kTableErrorNone" = 0,
"kTableErrorNoRow" = 1,
"kTableErrorRowSpan" = 2,
"kTableErrorColSpan" = 4,
"kElemNoJoin" = 1,
"kElemNoSplit" = 2,
"kElemArtifact" = 4,
"kElemHeader" = 8,
"kElemFooter" = 16,
"kElemSplitter" = 32,
"kElemNoTable" = 64,
"kElemNoImage" = 128,
"kElemInitial" = 256,
"kElemNoExpand" = 512,
"kElemContinuous" = 1024,
"kElemAnchor" = 2048,
"kPageInsertNone" = 0,
"kPageInsertBookmarks" = 1,
"kPageInsertAll" = 2,
"kContentToPage" = 1,
"kContentToForm" = 2,
"kContentToCharproc" = 4,
"kStateDefault" = 0,
"kStateNoRender" = 1,
"kStateExclude" = 2,
"kInsertBeforeFirst" = 0,
"kInsertAfterLast" = -1,
"kWordFinderDefault" = 0,
"kWordFinderStateFlags" = 1,
"kUserPermissionNone" = 0,
"kUserPermissionAll" = -1,
"kUserPermissionMask" = 3900,
"kUserPermissionPrint" = 4,
"kUserPermissionModify" = 8,
"kUserPermissionExtract" = 16,
"kUserPermissionModifyAnnots" = 32,
"kUserPermissionFillForms" = 256,
"kUserPermissionExtractAccessibility" = 512,
"kUserPermissionAssembleDoc" = 1024,
"kUserPermissionPrintHighRes" = 2048,
"kContentMarkMcid" = 1,
"kContentMarkArtifact" = 2,
"kContentMarkCustom" = 4,
"kPdfStandardNone" = 0,
"kPdfStandardPdfA" = 1,
"kPdfStandardPdfUA" = 2,
"kPdfStandardPdfX" = 4,
"kPdfStandardPdfE" = 8,
"kPdfStandardPdfVT" = 16,
"kHtmlNone" = 0,
"kHtmlExportJavaScripts" = 1,
"kHtmlExportFonts" = 2,
"kHtmlRetainFontSize" = 4,
"kHtmlRetainTextColor" = 8,
"kHtml41Support" = 16,
"kHtmlNoExternalCSS" = 32,
"kHtmlNoExternalJS" = 64,
"kHtmlNoExternalIMG" = 128,
"kHtmlNoExternalFONT" = 256,
"kHtmlGrayBackground" = 512,
"kHtmlNoPageRender" = 1024,
"kHtmlNoHeadNode" = 2048,
"kHtmlNoDocumentNode" = 4096,
"kHtmlNoPagesNode" = 8192,
"kJsonNone" = 0,
"kJsonExportDocInfo" = 1,
"kJsonExportPageInfo" = 2,
"kJsonExportPageContent" = 16,
"kJsonExportStructTree" = 32,
"kJsonExportPageMap" = 64,
"kJsonExportBBox" = 256,
"kJsonExportContentMarks" = 512,
"kJsonExportText" = 4096,
"kJsonExportTextStyle" = 8192,
"kJsonExportTextState" = 16384,
"kJsonExportImages" = 65536,
"kJsonExportAnnotations" = 131072,
"kEnumNone" = 0,
"kEnumReverseOrder" = 1,
"kEnumChildrenFirst" = 2,
"kEnumForms" = 4,
"kEnumFormsProc" = 8,
"kEnumChars" = 16,
"kTextNone" = 1,
"kTextRtl" = 2,
}

interface PdfPoint {
x: number;
y: number;
_PdfPoint(): void; 
}

interface PdfDevPoint {
x: number;
y: number;
_PdfDevPoint(): void; 
}

interface PdfRect {
left: number;
top: number;
right: number;
bottom: number;
_PdfRect(): void; 
}

interface PdfDevRect {
left: number;
top: number;
right: number;
bottom: number;
_PdfDevRect(): void; 
}

interface PdfQuad {
tl: PdfPoint;
tr: PdfPoint;
bl: PdfPoint;
br: PdfPoint;
_PdfQuad(): void; 
}

interface PdfDevQuad {
tl: PdfDevPoint;
tr: PdfDevPoint;
bl: PdfDevPoint;
br: PdfDevPoint;
_PdfDevQuad(): void; 
}

interface PdfMatrix {
a: number;
b: number;
c: number;
d: number;
e: number;
f: number;
_PdfMatrix(): void; 
}

interface PdfGray {
gray: number;
_PdfGray(): void; 
}

interface PdfRGB {
r: number;
g: number;
b: number;
_PdfRGB(): void; 
}

interface PdfCMYK {
c: number;
m: number;
y: number;
k: number;
_PdfCMYK(): void; 
}

interface PdfColorState {
fill_type: PdfFillType;
stroke_type: PdfFillType;
fill_color: PdfColor;
stroke_color: PdfColor;
fill_opacity: number;
stroke_opacity: number;
_PdfColorState(): void; 
}

interface PdeColorState {
fill_type: PdfFillType;
stroke_type: PdfFillType;
fill_color: PdfRGB;
stroke_color: PdfRGB;
fill_opacity: number;
stroke_opacity: number;
_PdeColorState(): void; 
}

interface PdfTextState {
color_state: PdfColorState;
font: PdfFont;
font_size: number;
char_spacing: number;
word_spacing: number;
flags: number;
_PdfTextState(): void; 
}

interface PdfGraphicState {
color_state: PdfColorState;
line_width: number;
miter_limit: number;
line_cap: PdfLineCap;
line_join: PdfLineJoin;
blend_mode: PdfBlendMode;
matrix: PdfMatrix;
_PdfGraphicState(): void; 
}

interface PdeGraphicState {
color_state: PdeColorState;
line_width: number;
miter_limit: number;
line_cap: PdfLineCap;
line_join: PdfLineJoin;
blend_mode: PdfBlendMode;
matrix: PdfMatrix;
_PdeGraphicState(): void; 
}

interface PdfFontState {
type: PdfFontType;
flags: number;
bbox: PdfRect;
ascent: number;
descent: number;
italic: number;
bold: number;
fixed_width: number;
vertical: number;
embedded: number;
height: number;
_PdfFontState(): void; 
}

interface PdfPageRenderParams {
device: PsRenderDeviceContext;
image: PsImage;
matrix: PdfMatrix;
clip_box: PdfRect;
render_flags: number;
_PdfPageRenderParams(): void; 
}

interface PdfTiffParams {
dpi: number;
render_flags: number;
_PdfTiffParams(): void; 
}

interface PdfAnnotAppearance {
fill_color: PdfRGB;
fill_type: PdfFillType;
border_color: PdfRGB;
border_width: number;
border: PdfBorderStyle;
opacity: number;
font_size: number;
text_align: PdfTextAlignment;
_PdfAnnotAppearance(): void; 
}

interface PdfBookmarkAppearance {
color: PdfRGB;
italic: number;
bold: number;
_PdfBookmarkAppearance(): void; 
}

interface PdfWhitespaceParams {
width: number;
height: number;
_PdfWhitespaceParams(): void; 
}

interface PdfMediaQueryParams {
type: PdfMediaType;
min_width: number;
_PdfMediaQueryParams(): void; 
}

interface PdfImageParams {
format: PdfImageFormat;
quality: number;
_PdfImageParams(): void; 
}

interface PdfTagsParams {
standard_attrs: number;
css_attrs: number;
headings: number;
_PdfTagsParams(): void; 
}

interface PdsContentParams {
flags: number;
form_type: number;
bbox: PdfRect;
matrix: PdfMatrix;
_PdsContentParams(): void; 
}

interface PdfStandardSecurityParams {
permissions: number;
revision: number;
encrypt_method: PdfStandardEncryptionMethod;
encrypt_metadata: number;
_PdfStandardSecurityParams(): void; 
}

interface PdfHtmlParams {
flags: number;
width: number;
type: PdfHtmlType;
image_params: PdfImageParams;
_PdfHtmlParams(): void; 
}

interface PdfJsonParams {
flags: number;
_PdfJsonParams(): void; 
}

interface PsImageInfo {
width: number;
height: number;
page_count: number;
_PsImageInfo(): void; 
}

interface PdfCellParams {
scope: number;
header: number;
row_span: number;
col_span: number;
row: number;
col: number;
_PdfCellParams(): void; 
}

interface PdfCancelProc {
}

interface PdfEventProc {
}

interface PdsObjectEventProc {
}

interface PdsContentEventProc {
}

interface PdsPageObjectEventProc {
}

interface PdfDigestDataProc {
}

interface PsStreamReadProc {
}

interface PsStreamWriteProc {
}

interface PsStreamDestroyProc {
}

interface PsStreamGetSizeProc {
}

interface PsStreamGetPosProc {
}

interface PdfSecurityDestroyProc {
}

interface PdfSecuritySetAuthorizationDataProc {
}

interface PdfSecurityOnInitProc {
}

interface PdfSecurityGetPermissionsProc {
}

interface PdfSecurityIsMetadataEncryptedProc {
}

interface PdfSecurityUpdateEncryptDictProc {
}

interface PdfSecurityAuthorizeOwnerProc {
}

interface PdfSecurityGetDecryptSizeProc {
}

interface PdfSecurityDecryptContentProc {
}

interface PdfSecurityGetEncryptSizeProc {
}

interface PdfSecurityEncryptContentProc {
}

interface PdfGetAuthDataProc {
}

interface PdfSecurityCreateHandlerProc {
}

interface PdfAnnotHandlerCanCopyProc {
}

interface PdfAnnotHandlerCopyProc {
}

interface PdfAnnotHandlerCanPasteProc {
}

interface PdfAnnotHandlerPasteProc {
}

interface PdfAnnotHandlerDestroyDataProc {
}

interface PdfAnnotHandlerDestroyProc {
}

interface PdfActionHandlerCanCopyProc {
}

interface PdfActionHandlerCopyProc {
}

interface PdfActionHandlerCanPasteProc {
}

interface PdfActionHandlerPasteProc {
}

interface PdfActionHandlerDestroyDataProc {
}

interface PdfActionHandlerDestroyProc {
}

interface PdfEnumObjectsProc {
}

interface PdfPageEnumProc {
}

interface PdfAnnotEnumProc {
}

interface PdfFontEnumProc {
}

interface PdfBookmarkEnumProc {
}

interface PdfPageObjectEnumProc {
}

interface PdfStructElemEnumProc {
}

interface PdfStructElemConstEnumProc {
}

interface PdsObject {
GetObjectType(): PdfObjectType; 
GetId(): number; 
GetGenId(): number; 
GetDoc(): PdfDoc; 
Clone(_clone_indirect: boolean): PdsObject; 
}

interface PdsBoolean extends PdsObject {
GetValue(): boolean; 
}

interface PdsNumber extends PdsObject {
IsIntegerValue(): boolean; 
GetIntegerValue(): number; 
GetValue(): number; 
}

interface PdsString extends PdsObject {
GetValue(_buffer: string | Uint8Array,_len: number): number; 
GetText(_buffer: string | Uint8Array,_len: number): number; 
IsHexValue(): boolean; 
}

interface PdsName extends PdsObject {
GetValue(_buffer: string | Uint8Array,_len: number): number; 
GetText(_buffer: string | Uint8Array,_len: number): number; 
}

interface PdsArray extends PdsObject {
GetNumObjects(): number; 
Get(_index: number): PdsObject; 
Put(_index: number,_value: PdsObject): boolean; 
PutNumber(_index: number,_value: number): boolean; 
PutName(_index: number,_value: string | Uint8Array): boolean; 
PutString(_index: number,_value: string | Uint8Array): boolean; 
Insert(_index: number,_value: PdsObject): boolean; 
InsertDict(_index: number): PdsDictionary; 
InsertArray(_index: number): PdsArray; 
RemoveNth(_index: number): boolean; 
GetDictionary(_index: number): PdsDictionary; 
GetArray(_index: number): PdsArray; 
GetStream(_index: number): PdsStream; 
GetString(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetText(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetNumber(_index: number): number; 
GetInteger(_index: number): number; 
}

interface PdsDictionary extends PdsObject {
Known(_key: string | Uint8Array): boolean; 
GetNumKeys(): number; 
GetKey(_index: number,_buffer: string | Uint8Array,_len: number): number; 
Get(_key: string | Uint8Array): PdsObject; 
Put(_key: string | Uint8Array,_value: PdsObject): boolean; 
PutBool(_key: string | Uint8Array,_value: boolean): boolean; 
PutName(_key: string | Uint8Array,_value: string | Uint8Array): boolean; 
PutString(_key: string | Uint8Array,_value: string | Uint8Array): boolean; 
PutNumber(_key: string | Uint8Array,_value: number): boolean; 
GetRect(_key: string | Uint8Array,_rect: PdfRect): boolean; 
PutRect(_key: string | Uint8Array,_rect: PdfRect): boolean; 
GetMatrix(_key: string | Uint8Array,_matrix: PdfMatrix): boolean; 
PutMatrix(_key: string | Uint8Array,_matrix: PdfMatrix): boolean; 
PutDict(_key: string | Uint8Array): PdsDictionary; 
PutArray(_key: string | Uint8Array): PdsArray; 
GetDictionary(_key: string | Uint8Array): PdsDictionary; 
GetArray(_key: string | Uint8Array): PdsArray; 
GetStream(_key: string | Uint8Array): PdsStream; 
GetString(_key: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
GetText(_key: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
GetNumber(_key: string | Uint8Array): number; 
GetInteger(_key: string | Uint8Array,_default_value: number): number; 
GetBoolean(_key: string | Uint8Array,_default_value: boolean): boolean; 
RemoveKey(_key: string | Uint8Array): boolean; 
}

interface PdsStream extends PdsObject {
GetStreamDict(): PdsDictionary; 
GetRawDataSize(): number; 
IsEof(): boolean; 
GetSize(): number; 
Read(_offset: number,_buffer: string | Uint8Array,_size: number): boolean; 
GetPos(): number; 
}

interface PdsNull extends PdsObject {
}

interface PdsContent {
AddNewText(_index: number,_font: PdfFont,_matrix: PdfMatrix): PdsText; 
AddNewPath(_index: number,_matrix: PdfMatrix): PdsPath; 
AddNewImage(_index: number,_image_xobj: PdsStream,_matrix: PdfMatrix): PdsImage; 
AddNewForm(_index: number,_form_xobj: PdsStream,_matrix: PdfMatrix): PdsForm; 
RemoveObject(_object: PdsPageObject): boolean; 
GetNumObjects(): number; 
GetObject(_index: number): PdsPageObject; 
ToObject(_doc: PdfDoc,_content_params: PdsContentParams): PdsStream; 
GetPage(): PdfPage; 
GetForm(): PdsForm; 
}

interface PdsPageObject {
GetObjectType(): PdfPageObjectType; 
GetBBox(_bbox: PdfRect): void; 
GetQuad(_quad: PdfQuad): void; 
GetId(): number; 
GetStateFlags(): number; 
SetStateFlags(_flags: number): boolean; 
GetStructObject(_struct_parent: boolean): PdsObject; 
GetContentMark(): PdsContentMark; 
GetMcid(): number; 
RemoveTags(_flags: number): boolean; 
GetPage(): PdfPage; 
GetContentStreamIndex(): number; 
GetParentContent(): PdsContent; 
GetGState(_g_state: PdfGraphicState): boolean; 
SetGState(_g_state: PdfGraphicState): boolean; 
TransformCTM(_matrix: PdfMatrix): boolean; 
MoveToObject(_ref_obj: PdsPageObject,_after: boolean,_dst_tag_index: number,_obj_tag_index: number): boolean; 
MoveToContent(_content: PdsContent,_index: number): boolean; 
CopyToContent(_content: PdsContent,_index: number): PdsPageObject; 
GetDoc(): PdfDoc; 
GetNumEqualTags(_object: PdsPageObject): number; 
GetOperatorId(): number; 
GetContentId(): number; 
GetNumContentItemIds(): number; 
GetContentItemId(_level: number): number; 
}

interface PdsText extends PdsPageObject {
GetText(_buffer: string | Uint8Array,_len: number): number; 
GetTextEx(_text_flags: number,_buffer: string | Uint8Array,_len: number): number; 
SetText(_buffer: string | Uint8Array): void; 
GetTextState(_text_state: PdfTextState): boolean; 
SetTextState(_text_state: PdfTextState): void; 
GetTextMatrix(_matrix: PdfMatrix): boolean; 
GetNumChars(): number; 
GetCharCode(_index: number): number; 
GetCharText(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetCharBBox(_index: number,_bbox: PdfRect): boolean; 
GetCharQuad(_index: number,_quad: PdfQuad): boolean; 
GetCharAdvanceWidth(_index: number): number; 
SplitAtChar(_index: number): PdsText; 
GetCharStateFlags(_index: number): number; 
SetCharStateFlags(_index: number,_flags: number): boolean; 
}

interface PdsForm extends PdsPageObject {
GetContent(): PdsContent; 
GetMatrix(_matrix: PdfMatrix): void; 
GetObject(): PdsStream; 
}

interface PdsPath extends PdsPageObject {
GetNumPathPoints(): number; 
GetPathPoint(_index: number): PdsPathPoint; 
SetStroke(_stroke: boolean): boolean; 
SetFillType(_fill: PdfFillRule): boolean; 
MoveTo(_point: PdfPoint): boolean; 
LineTo(_point: PdfPoint): boolean; 
CurveTo(_control_p_1: PdfPoint,_control_p_2: PdfPoint,_point: PdfPoint): boolean; 
ArcTo(_end_p: PdfPoint,_radius_p: PdfPoint,_angle: number,_is_large: boolean,_sweep: boolean): boolean; 
ClosePath(): boolean; 
}

interface PdsPathPoint {
GetType(): PdsPathPointType; 
GetPoint(_point: PdfPoint): boolean; 
IsClosed(): boolean; 
}

interface PdsSoftMask {
GetDataStm(): PdsStream; 
}

interface PdsImage extends PdsPageObject {
GetDataStm(): PdsStream; 
GetSMask(): PdsSoftMask; 
HasSMask(): boolean; 
}

interface PdsShading extends PdsPageObject {
}

interface PdsContentMark {
GetNumTags(): number; 
GetTagName(_index: number,_buffer: string | Uint8Array,_len: number): number; 
SetTagName(_index: number,_name: string | Uint8Array): boolean; 
GetTagObject(_index: number): PdsDictionary; 
SetTagObject(_index: number,_object: PdsDictionary,_indirect: boolean): boolean; 
GetTagMcid(): number; 
GetTagArtifact(): number; 
AddTag(_name: string | Uint8Array,_object: PdsDictionary,_indirect: boolean): boolean; 
InsertTag(_index: number,_name: string | Uint8Array,_object: PdsDictionary,_indirect: boolean): boolean; 
RemoveTag(_index: number): boolean; 
}

interface PdeWordList {
GetNumWords(): number; 
GetWord(_index: number): PdeWord; 
GetRefNum(): number; 
Release(): number; 
}

interface PdeElement {
GetType(): PdfElementType; 
GetBBox(_bbox: PdfRect): void; 
SetBBox(_bbox: PdfRect): boolean; 
GetQuad(_quad: PdfQuad): void; 
GetId(): number; 
GetGraphicState(_g_state: PdeGraphicState): boolean; 
GetNumChildren(): number; 
GetChild(_index: number): PdeElement; 
GetAlignment(): PdfAlignment; 
GetAngle(): number; 
SetData(_data: number): void; 
GetData(): number; 
SetAlt(_alt: string | Uint8Array): boolean; 
SetActualText(_text: string | Uint8Array): boolean; 
GetTag(_buffer: string | Uint8Array,_len: number): number; 
SetTag(_text: string | Uint8Array): boolean; 
GetTagId(_buffer: string | Uint8Array,_len: number): number; 
SetTagId(_id: string | Uint8Array): boolean; 
GetFlags(): number; 
SetFlags(_flags: number): boolean; 
GetStateFlags(): number; 
SetStateFlags(_flags: number,_objects: boolean): boolean; 
GetNumPageObjects(): number; 
GetPageObject(_index: number): PdsPageObject; 
GetPageMap(): PdePageMap; 
GetLabelType(): PdfLabelType; 
SetLabelType(_type: PdfLabelType): boolean; 
}

interface PdeContainer extends PdeElement {
}

interface PdeList extends PdeElement {
}

interface PdeAnnot extends PdeElement {
GetAnnot(): PdfAnnot; 
}

interface PdeFormField extends PdeAnnot {
}

interface PdeImage extends PdeContainer {
GetImageType(): PdfImageType; 
GetCaption(): PdeElement; 
}

interface PdeLine extends PdeElement {
}

interface PdeRect extends PdeContainer {
}

interface PdeHeader extends PdeContainer {
}

interface PdeFooter extends PdeContainer {
}

interface PdeArtifact extends PdeContainer {
}

interface PdeCell extends PdeContainer {
GetRowNum(): number; 
SetRowNum(_row: number): boolean; 
GetColNum(): number; 
SetColNum(_col: number): boolean; 
GetHeader(): boolean; 
SetHeader(_header: boolean): boolean; 
GetHeaderScope(): number; 
SetHeaderScope(_scope: number): boolean; 
GetRowSpan(): number; 
SetRowSpan(_span: number): boolean; 
GetColSpan(): number; 
SetColSpan(_span: number): boolean; 
HasBorderGraphicState(_index: number): boolean; 
GetSpanCell(): PdeCell; 
GetNumAssociatedHeaders(): number; 
GetAssociatedHeader(_index: number,_buffer: string | Uint8Array,_len: number): number; 
AddAssociatedHeader(_id: string | Uint8Array): boolean; 
RemoveAssociatedHeader(_index: number): boolean; 
}

interface PdeTable extends PdeContainer {
GetNumRows(): number; 
SetNumRows(_num: number): void; 
GetNumCols(): number; 
SetNumCols(_num: number): void; 
GetCell(_row: number,_col: number): PdeCell; 
GetRowAlignment(_row: number): PdfAlignment; 
GetColAlignment(_col: number): PdfAlignment; 
GetCaption(): PdeElement; 
GetTableType(): number; 
}

interface PdeToc extends PdeTable {
}

interface PdeTextRun extends PdeElement {
GetTextObject(): PdsText; 
GetFirstCharIndex(): number; 
GetLastCharIndex(): number; 
}

interface PdeWord extends PdeElement {
GetText(_buffer: string | Uint8Array,_len: number): number; 
HasTextState(): boolean; 
GetTextState(_text_state: PdfTextState): void; 
GetNumChars(_include_spaces: boolean): number; 
GetCharCode(_index: number): number; 
GetCharText(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetCharTextState(_index: number,_text_state: PdfTextState): void; 
GetCharBBox(_index: number,_bbox: PdfRect): void; 
GetWordFlags(): number; 
GetBackground(): PdeElement; 
GetOrigin(_point: PdfPoint): void; 
GetNumTextRuns(_include_spaces: boolean): number; 
GetTextRun(_index: number): PdeTextRun; 
GetCharStateFlags(_index: number): number; 
}

interface PdeTextLine extends PdeElement {
GetText(_buffer: string | Uint8Array,_len: number): number; 
HasTextState(): boolean; 
GetTextState(_text_state: PdfTextState): void; 
GetNumWords(): number; 
GetWord(_index: number): PdeWord; 
GetTextLineFlags(): number; 
}

interface PdeText extends PdeElement {
GetText(_buffer: string | Uint8Array,_len: number): number; 
HasTextState(): boolean; 
GetTextState(_text_state: PdfTextState): void; 
GetNumTextLines(): number; 
GetTextLine(_index: number): PdeTextLine; 
GetNumWords(): number; 
GetWord(_index: number): PdeWord; 
GetLineSpacing(): number; 
GetIndent(): number; 
GetTextStyle(): PdfTextStyle; 
SetTextStyle(_style: PdfTextStyle): boolean; 
GetTextFlags(): number; 
SetTextFlags(_flags: number): boolean; 
}

interface PdfColorSpace {
GetName(_buffer: string | Uint8Array,_len: number): number; 
GetFamilyType(): PdfColorSpaceFamily; 
GetNumComps(): number; 
CreateColor(): PdfColor; 
}

interface PdfColor {
GetColorSpace(): PdfColorSpace; 
SetColorSpace(_color_space: PdfColorSpace): void; 
GetValue(_index: number): number; 
SetValue(_index: number,_value: number): void; 
GetRGB(_rgb: PdfRGB): boolean; 
GetCMYK(_cmyk: PdfCMYK): boolean; 
GetGrayscale(_gray: PdfGray): boolean; 
Destroy(): void; 
}

interface PdfAction {
GetSubtype(): PdfActionType; 
GetJavaScript(_buffer: string | Uint8Array,_len: number): number; 
GetObject(): PdsDictionary; 
GetDestFile(_buffer: string | Uint8Array,_len: number): number; 
GetViewDestination(): PdfViewDestination; 
SetViewDestination(_view_dest: PdfViewDestination): boolean; 
CanCopy(): boolean; 
CanPaste(_dest_doc: PdfDoc,_data: number): boolean; 
Copy(): number; 
Paste(_dest_doc: PdfDoc,_data: number): PdfAction; 
DestroyClipboardData(_data: number): void; 
GetNumChildren(): number; 
GetChild(_index: number): PdfAction; 
RemoveChild(_index: number): boolean; 
}

interface PdfActionHandler {
GetType(_buffer: string | Uint8Array,_len: number): number; 
Destroy(): void; 
SetCanCopyProc(_proc: PdfActionHandlerCanCopyProc): void; 
SetCopyProc(_proc: PdfActionHandlerCopyProc): void; 
SetCanPasteProc(_proc: PdfActionHandlerCanPasteProc): void; 
SetPasteProc(_proc: PdfActionHandlerPasteProc): void; 
SetDestroyDataProc(_proc: PdfActionHandlerDestroyDataProc): void; 
SetDestroyProc(_proc: PdfActionHandlerDestroyProc): void; 
}

interface PdfAnnot {
GetSubtype(): PdfAnnotSubtype; 
GetFlags(): number; 
SetFlags(_flags: number): boolean; 
GetAppearance(_appearance: PdfAnnotAppearance): void; 
GetAppearanceXObject(_mode: PdfAnnotAppearanceMode): PdsStream; 
SetAppearanceFromXObject(_xobj: PdsStream,_mode: PdfAnnotAppearanceMode): boolean; 
RefreshAppearance(): boolean; 
GetBBox(_bbox: PdfRect): void; 
PointInAnnot(_point: PdfPoint): boolean; 
RectInAnnot(_rect: PdfRect): boolean; 
GetStructObject(_struct_parent: boolean): PdsObject; 
GetObject(): PdsDictionary; 
NotifyWillChange(_key: string | Uint8Array): void; 
NotifyDidChange(_key: string | Uint8Array,_err: number): void; 
IsValid(): boolean; 
IsMarkup(): boolean; 
CanCopy(): boolean; 
CanPaste(_dest_page: PdfPage,_center: PdfPoint,_data: number): boolean; 
Copy(): number; 
Paste(_dest_page: PdfPage,_center: PdfPoint,_data: number): PdfAnnot; 
DestroyClipboardData(_data: number): void; 
GetStateFlags(): number; 
SetStateFlags(_flags: number): boolean; 
GetPageObject(): PdsDictionary; 
}

interface PdfLinkAnnot extends PdfAnnot {
GetNumQuads(): number; 
GetQuad(_index: number,_quad: PdfQuad): void; 
AddQuad(_quad: PdfQuad): boolean; 
RemoveQuad(_index: number): boolean; 
GetAction(): PdfAction; 
SetAction(_action: PdfAction): boolean; 
}

interface PdfMarkupAnnot extends PdfAnnot {
GetContents(_buffer: string | Uint8Array,_len: number): number; 
SetContents(_contents: string | Uint8Array): boolean; 
GetAuthor(_buffer: string | Uint8Array,_len: number): number; 
SetAuthor(_author: string | Uint8Array): boolean; 
GetNumReplies(): number; 
GetReply(_index: number): PdfAnnot; 
AddReply(_author: string | Uint8Array,_text: string | Uint8Array): PdfAnnot; 
}

interface PdfTextAnnot extends PdfMarkupAnnot {
}

interface PdfTextMarkupAnnot extends PdfMarkupAnnot {
GetNumQuads(): number; 
GetQuad(_index: number,_quad: PdfQuad): void; 
AddQuad(_quad: PdfQuad): boolean; 
RemoveQuad(_index: number): boolean; 
}

interface PdfWidgetAnnot extends PdfAnnot {
GetCaption(_buffer: string | Uint8Array,_len: number): number; 
GetFontName(_buffer: string | Uint8Array,_len: number): number; 
GetAction(): PdfAction; 
SetAction(_action: PdfAction): boolean; 
GetAAction(_event: PdfActionEventType): PdfAction; 
GetFormField(): PdfFormField; 
}

interface PdfAnnotHandler {
GetType(_buffer: string | Uint8Array,_len: number): number; 
Destroy(): void; 
SetCanCopyProc(_proc: PdfAnnotHandlerCanCopyProc): void; 
SetCopyProc(_proc: PdfAnnotHandlerCopyProc): void; 
SetCanPasteProc(_proc: PdfAnnotHandlerCanPasteProc): void; 
SetPasteProc(_proc: PdfAnnotHandlerPasteProc): void; 
SetDestroyDataProc(_proc: PdfAnnotHandlerDestroyDataProc): void; 
SetDestroyProc(_proc: PdfAnnotHandlerDestroyProc): void; 
}

interface PdfViewDestination {
GetPageNum(_doc: PdfDoc): number; 
GetFitType(): PdfDestFitType; 
GetBBox(_bbox: PdfRect): void; 
GetZoom(): number; 
GetObject(): PdsArray; 
}

interface PdfSecurityHandler {
GetFilter(_buffer: string | Uint8Array,_len: number): number; 
Destroy(): void; 
}

interface PdfStandardSecurityHandler extends PdfSecurityHandler {
SetPassword(_password: string | Uint8Array,_level: PdfPermissionLevel): void; 
HasPassword(_level: PdfPermissionLevel): boolean; 
GetParams(_params: PdfStandardSecurityParams): boolean; 
}

interface PdfCustomSecurityHandler extends PdfSecurityHandler {
SetAuthorizationData(_data: number): boolean; 
SetDestroyProc(_proc: PdfSecurityDestroyProc): void; 
SetSetAuthoziationDataProc(_proc: PdfSecuritySetAuthorizationDataProc): void; 
SetOnInitProc(_proc: PdfSecurityOnInitProc): void; 
SetGetPermissionsProc(_proc: PdfSecurityGetPermissionsProc): void; 
SetIsMetadataEncryptedProc(_proc: PdfSecurityIsMetadataEncryptedProc): void; 
SetUpdateEncryptDictProc(_proc: PdfSecurityUpdateEncryptDictProc): void; 
SetAuthorizeOwnerProc(_proc: PdfSecurityAuthorizeOwnerProc): void; 
SetGetDecryptSizeProc(_proc: PdfSecurityGetDecryptSizeProc): void; 
SetDecryptContentProc(_proc: PdfSecurityDecryptContentProc): void; 
SetGetEncryptSizeProc(_proc: PdfSecurityGetEncryptSizeProc): void; 
SetEncryptContentProc(_proc: PdfSecurityEncryptContentProc): void; 
}

interface PdfBaseDigSig {
Destroy(): void; 
SetReason(_reason: string | Uint8Array): boolean; 
SetLocation(_location: string | Uint8Array): boolean; 
SetContactInfo(_contact: string | Uint8Array): boolean; 
SetName(_name: string | Uint8Array): boolean; 
SetTimeStampServer(_url: string | Uint8Array,_user_name: string | Uint8Array,_password: string | Uint8Array): boolean; 
SignDoc(_doc: PdfDoc,_path: string | Uint8Array): boolean; 
}

interface PdfDigSig extends PdfBaseDigSig {
SetPfxFile(_pfx_file: string | Uint8Array,_pfx_password: string | Uint8Array): boolean; 
}

interface PdfCustomDigSig extends PdfBaseDigSig {
RegisterDigestDataProc(_proc: PdfDigestDataProc,_data: number): boolean; 
}

interface PdfDocUndo {
BeginOperation(): boolean; 
EndOperation(): boolean; 
GetNumEntries(): number; 
Execute(): boolean; 
GetTitle(_buffer: string | Uint8Array,_len: number): number; 
GetData(): number; 
}

interface PdfDoc {
Save(_path: string | Uint8Array,_save_flags: number): boolean; 
SaveToStream(_stream: PsStream,_flags: number): boolean; 
Close(): number; 
Authorize(_perm: PdfPermissionLevel,_callback: PdfGetAuthDataProc,_client_data: number): boolean; 
IsSecured(): boolean; 
SetSecurityHandler(_handler: PdfSecurityHandler): boolean; 
GetSecurityHandler(): PdfSecurityHandler; 
GetNumPages(): number; 
AcquirePage(_page_num: number): PdfPage; 
CreatePage(_index: number,_media_box: PdfRect): PdfPage; 
DeletePages(_index_from: number,_index_to: number): boolean; 
InsertPages(_index: number,_doc: PdfDoc,_index_from: number,_index_to: number,_insert_flags: number): boolean; 
MovePage(_index_to: number,_index_from: number): boolean; 
GetNumDocumentJavaScripts(): number; 
GetDocumentJavaScript(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetDocumentJavaScriptName(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetNumCalculatedFormFields(): number; 
GetCalculatedFormField(_index: number): PdfFormField; 
GetNumFormFields(): number; 
GetFormField(_index: number): PdfFormField; 
GetFormFieldByName(_buffer: string | Uint8Array): PdfFormField; 
GetInfo(_key: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
SetInfo(_key: string | Uint8Array,_info: string | Uint8Array): boolean; 
GetBookmarkRoot(): PdfBookmark; 
CreateBookmarkRoot(): PdfBookmark; 
ApplyRedaction(): boolean; 
GetNumAlternates(): number; 
AcquireAlternate(_index: number): PdfAlternate; 
AddTags(_tag_params: PdfTagsParams): boolean; 
RemoveTags(): boolean; 
GetTemplate(): PdfDocTemplate; 
GetMetadata(): PdsStream; 
GetLang(_buffer: string | Uint8Array,_len: number): number; 
SetLang(_lang: string | Uint8Array): boolean; 
ReplaceFont(_font: PdfFont,_face_name: string | Uint8Array): boolean; 
EmbedFont(_font: PdfFont,_subset: boolean): boolean; 
EmbedFonts(_subset: boolean): boolean; 
GetTrailerObject(): PdsDictionary; 
GetRootObject(): PdsDictionary; 
GetInfoObject(): PdsDictionary; 
CreateDictObject(_indirect: boolean): PdsDictionary; 
CreateArrayObject(_indirect: boolean): PdsArray; 
CreateBooleanObject(_indirect: boolean,_value: boolean): PdsBoolean; 
CreateNameObject(_indirect: boolean,_value: string | Uint8Array): PdsName; 
CreateStringObject(_indirect: boolean,_value: string | Uint8Array,_hex: boolean): PdsString; 
CreateIntObject(_indirect: boolean,_value: number): PdsNumber; 
CreateNumberObject(_indirect: boolean,_value: number): PdsNumber; 
CreateStreamObject(_indirect: boolean,_dict: PdsDictionary,_buffer: string | Uint8Array,_size: number): PdsStream; 
CreateXObjectFromImage(_image_data: PsStream,_format: PdfImageFormat,_page_index: number): PdsStream; 
CreateXObjectFromPage(_page: PdfPage): PdsStream; 
GetObjectById(_obj_id: number): PdsObject; 
CreateStructTree(): PdsStructTree; 
GetStructTree(): PdsStructTree; 
RemoveStructTree(): boolean; 
RemoveBookmarks(): boolean; 
CreateBookmarks(): boolean; 
AddFontMissingUnicode(): boolean; 
GetNameTree(_name: string | Uint8Array,_create: boolean): PdfNameTree; 
RemoveNameTree(_name: string | Uint8Array): boolean; 
GetPageNumFromObject(_page_dict: PdsObject): number; 
GetAnnotFromObject(_annot_dict: PdsObject): PdfAnnot; 
GetBookmarkFromObject(_bookmark_obj: PdsObject): PdfBookmark; 
GetActionFromObject(_action_obj: PdsObject): PdfAction; 
GetActionFromViewDest(_dest: PdfViewDestination): PdfAction; 
GetViewDestinationFromObject(_dest_obj: PdsObject): PdfViewDestination; 
CreateViewDestination(_page_num: number,_fit_type: PdfDestFitType,_rect: PdfRect,_zoom: number): PdfViewDestination; 
CreateFormFromObject(_stream: PdsStream,_matrix: PdfMatrix): PdsForm; 
CreateAction(_type: PdfActionType): PdfAction; 
CreateContent(): PdsContent; 
CreateColorSpace(_cs_family: PdfColorSpaceFamily): PdfColorSpace; 
CreateFont(_sys_font: PsSysFont,_charset: PdfFontCharset,_flags: number): PdfFont; 
CreateUndo(_title: string | Uint8Array,_client_data: number): PdfDocUndo; 
GetNumUndos(): number; 
GetUndo(_index: number): PdfDocUndo; 
ClearUndos(_index: number): boolean; 
GetNumRedos(): number; 
GetRedo(_index: number): PdfDocUndo; 
ClearRedos(_count: number): boolean; 
GetFlags(): number; 
SetFlags(_flags: number): boolean; 
ClearFlags(): boolean; 
GetUserPermissions(): number; 
GetVersion(): number; 
SetVersion(_version: number): boolean; 
GetPdfStandard(): number; 
SetPdfStandard(_flags: number,_part: string | Uint8Array): boolean; 
GetPath(_path: string | Uint8Array,_len: number): number; 
SetPath(_path: string | Uint8Array): boolean; 
CreateHtmlConversion(): PdfHtmlConversion; 
CreateJsonConversion(): PdfJsonConversion; 
CreateTiffConversion(): PdfTiffConversion; 
GetCommand(): PsCommand; 
EnumFonts(_flags: number,_proc: PdfFontEnumProc,_client_data: number): PdfEnumResultType; 
EnumBookmarks(_bmk: PdfBookmark,_flags: number,_proc: PdfBookmarkEnumProc,_client_data: number): PdfEnumResultType; 
EnumAnnots(_page_num: number,_flags: number,_proc: PdfAnnotEnumProc,_client_data: number): PdfEnumResultType; 
EnumPageObjects(_content: PdsContent,_object: PdsPageObject,_flags: number,_proc: PdfPageObjectEnumProc,_client_data: number): PdfEnumResultType; 
EnumStructTree(_structElem: PdsStructElement,_flags: number,_proc: PdfStructElemEnumProc,_client_data: number): PdfEnumResultType; 
GetProgressControl(): PsProgressControl; 
CreateFileSpec(_name: string | Uint8Array,_desc: string | Uint8Array,_af_relationship: string | Uint8Array,_subtype: string | Uint8Array,_buffer: string | Uint8Array,_size: number): PdsFileSpec; 
}

interface PdsFileSpec {
GetDictionary(): PdsDictionary; 
GetFileName(_buffer: string | Uint8Array,_len: number): number; 
SetFileName(_buffer: string | Uint8Array): boolean; 
GetFileStm(): PdsStream; 
}

interface PdfDocTemplate {
Update(): boolean; 
LoadFromStream(_stream: PsStream,_format: PsDataFormat): boolean; 
SaveToStream(_stream: PsStream,_format: PsDataFormat,_flags: number): boolean; 
SetDefaults(): boolean; 
GetProperty(_name: string | Uint8Array): number; 
SetProperty(_name: string | Uint8Array,_value: number): boolean; 
GetRegex(_name: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
SetRegex(_name: string | Uint8Array,_pattern: string | Uint8Array): boolean; 
AddPage(_page_num: number): boolean; 
GetPageTemplate(_page_num: number): PdfPageTemplate; 
GetNumNodes(_page_num: number,_path: string): number; 
GetNodeBBox(_page_num: number,_path: string,_index: number,_bbox: PdfRect): boolean; 
GetVersionMajor(): number; 
GetVersionMinor(): number; 
}

interface PdfPageTemplate {
GetPageNum(): number; 
GetLogicalRotate(): PdfRotate; 
GetNumColumns(): number; 
GetHeaderBBox(_bbox: PdfRect): boolean; 
GetFooterBBox(_bbox: PdfRect): boolean; 
}

interface PdfAlternate {
GetSubtype(): PdfAlternateType; 
GetName(_buffer: string | Uint8Array,_len: number): number; 
GetDescription(_buffer: string | Uint8Array,_len: number): number; 
GetFileName(_buffer: string | Uint8Array,_len: number): number; 
SaveContent(_path: string | Uint8Array): boolean; 
Release(): number; 
}

interface PdfHtmlAlternate extends PdfAlternate {
SaveResource(_resource_name: string | Uint8Array,_path: string | Uint8Array): boolean; 
}

interface PdfFont {
GetFontName(_buffer: string | Uint8Array,_len: number): number; 
GetFaceName(_buffer: string | Uint8Array,_len: number): number; 
GetFontState(_font_state: PdfFontState): void; 
GetSystemFontName(_buffer: string | Uint8Array,_len: number): number; 
GetSystemFontCharset(): PdfFontCharset; 
GetSystemFontBold(): boolean; 
GetSystemFontItalic(): boolean; 
GetEmbedded(): boolean; 
GetUnicodeFromCharcode(_charcode: number,_buffer: string | Uint8Array,_len: number): number; 
SetUnicodeForCharcode(_charcode: number,_buffer: string | Uint8Array): boolean; 
GetObject(): PdsDictionary; 
}

interface PdfFormField {
GetType(): PdfFieldType; 
GetFlags(): number; 
SetFlags(_flags: number): boolean; 
GetValue(_buffer: string | Uint8Array,_len: number): number; 
SetValue(_value: string | Uint8Array): boolean; 
GetDefaultValue(_buffer: string | Uint8Array,_len: number): number; 
GetFullName(_buffer: string | Uint8Array,_len: number): number; 
GetTooltip(_buffer: string | Uint8Array,_len: number): number; 
GetNumOptions(): number; 
GetOptionValue(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetOptionCaption(_index: number,_buffer: string | Uint8Array,_len: number): number; 
GetAction(): PdfAction; 
GetAAction(_event: PdfActionEventType): PdfAction; 
GetMaxLength(): number; 
GetWidgetExportValue(_annot: PdfAnnot,_buffer: string | Uint8Array,_len: number): number; 
GetObject(): PdsDictionary; 
GetNumExportValues(): number; 
GetExportValue(_index: number,_buffer: string | Uint8Array,_len: number): number; 
NotifyWillChange(_key: string | Uint8Array): void; 
NotifyDidChange(_key: string | Uint8Array,_err: number): void; 
}

interface PdfPage {
Release(): number; 
GetRefNum(): number; 
GetCropBox(_crop_box: PdfRect): void; 
GetMediaBox(_media_box: PdfRect): void; 
GetRotate(): PdfRotate; 
SetRotate(_rotate: PdfRotate): boolean; 
GetLogicalRotate(): PdfRotate; 
GetDefaultMatrix(_matrix: PdfMatrix): void; 
GetTemplateMatrix(_matrix: PdfMatrix): void; 
GetNumber(): number; 
AcquirePageMap(): PdePageMap; 
AcquirePageView(_zoom: number,_rotate: PdfRotate): PdfPageView; 
GetNumAnnots(): number; 
GetAnnot(_index: number): PdfAnnot; 
RemoveAnnot(_index: number,_flags: number): boolean; 
AddAnnot(_index: number,_annot: PdfAnnot): boolean; 
CreateAnnot(_subtype: PdfAnnotSubtype,_rect: PdfRect): PdfAnnot; 
GetNumAnnotsAtPoint(_point: PdfPoint): number; 
GetAnnotAtPoint(_point: PdfPoint,_index: number): PdfAnnot; 
GetNumAnnotsAtRect(_rect: PdfRect): number; 
GetAnnotAtRect(_rect: PdfRect,_index: number): PdfAnnot; 
DrawContent(_params: PdfPageRenderParams): boolean; 
GetContent(): PdsContent; 
GetResources(_res_type: string | Uint8Array,_create: boolean): PdsDictionary; 
GetObject(): PdsDictionary; 
FlattenFormXObjects(): boolean; 
CloneFormXObjects(): boolean; 
FlattenAnnot(_annot: PdfAnnot): boolean; 
GetContentFlags(): number; 
SetContent(): boolean; 
GetDoc(): PdfDoc; 
AcquireWordList(_alg: PdfWordFinderAlgorithm,_flags: number): PdeWordList; 
GetFlags(): number; 
SetFlags(_flags: number): boolean; 
ClearFlags(): boolean; 
CreateFormFromObject(_stream: PdsStream): PdsForm; 
}

interface PdePageMap {
Release(): number; 
GetElement(): PdeElement; 
GetWhitespace(_params: PdfWhitespaceParams,_index: number,_bbox: PdfRect): boolean; 
GetBBox(_bbox: PdfRect): void; 
HasElements(): boolean; 
CreateElements(): boolean; 
RemoveElements(): boolean; 
CreateElement(_type: PdfElementType,_parent: PdeElement): PdeElement; 
AddTags(_element: PdsStructElement,_sibling: boolean,_tag_params: PdfTagsParams): boolean; 
GetPage(): PdfPage; 
GetNumArtifacts(): number; 
GetArtifact(_index: number): PdeElement; 
}

interface PdfPageView {
Release(): number; 
GetDeviceWidth(): number; 
GetDeviceHeight(): number; 
GetDeviceMatrix(_matrix: PdfMatrix): void; 
RectToDevice(_rect: PdfRect,_dev_rect: PdfDevRect): void; 
PointToDevice(_point: PdfPoint,_dev_point: PdfDevPoint): void; 
RectToPage(_dev_rect: PdfDevRect,_rect: PdfRect): void; 
PointToPage(_dev_point: PdfDevPoint,_point: PdfPoint): void; 
}

interface PdfBookmark {
GetTitle(_buffer: string | Uint8Array,_len: number): number; 
SetTitle(_title: string | Uint8Array): void; 
GetAppearance(_appearance: PdfBookmarkAppearance): boolean; 
SetAppearance(_appearance: PdfBookmarkAppearance): boolean; 
GetAction(): PdfAction; 
SetAction(_action: PdfAction): boolean; 
GetNumChildren(): number; 
GetChild(_index: number): PdfBookmark; 
GetParent(): PdfBookmark; 
GetNext(): PdfBookmark; 
GetPrev(): PdfBookmark; 
GetObject(): PdsDictionary; 
AddChild(_index: number,_bmk: PdfBookmark): boolean; 
AddNewChild(_index: number,_title: string | Uint8Array): PdfBookmark; 
IsValid(): boolean; 
RemoveChild(_index: number): PdfBookmark; 
IsOpen(): boolean; 
SetOpen(_open: boolean): boolean; 
}

interface PdfNameTree {
GetObject(): PdsObject; 
Lookup(_name: string | Uint8Array): PdsObject; 
}

interface PsRegex {
Destroy(): void; 
SetPattern(_pattern: string | Uint8Array): boolean; 
Search(_text: string | Uint8Array,_position: number): boolean; 
GetText(_buffer: string | Uint8Array,_len: number): number; 
GetPosition(): number; 
GetLength(): number; 
GetNumMatches(): number; 
GetMatchText(_index: number,_buffer: string | Uint8Array,_len: number): number; 
}

interface PsStream {
Destroy(): void; 
IsEof(): boolean; 
GetSize(): number; 
Read(_offset: number,_buffer: string | Uint8Array,_size: number): boolean; 
Write(_offset: number,_buffer: string | Uint8Array,_size: number): boolean; 
GetPos(): number; 
Flush(): boolean; 
GetStream(): number; 
GetType(): PdfStreamType; 
}

interface PsFileStream extends PsStream {
}

interface PsMemoryStream extends PsStream {
Resize(_size: number): boolean; 
}

interface PsCustomStream extends PsStream {
SetReadProc(_proc: PsStreamReadProc): void; 
SetWriteProc(_proc: PsStreamWriteProc): void; 
SetDestroyProc(_proc: PsStreamDestroyProc): void; 
SetGetSizeProc(_proc: PsStreamGetSizeProc): void; 
}

interface PdsStructElement {
GetType(_mapped: boolean,_buffer: string | Uint8Array,_len: number): number; 
SetType(_type: string | Uint8Array): boolean; 
GetActualText(_buffer: string | Uint8Array,_len: number): number; 
SetActualText(_alt: string | Uint8Array): boolean; 
GetAlt(_buffer: string | Uint8Array,_len: number): number; 
SetAlt(_alt: string | Uint8Array): boolean; 
GetTitle(_buffer: string | Uint8Array,_len: number): number; 
SetTitle(_title: string | Uint8Array): boolean; 
GetText(_max: number,_buffer: string | Uint8Array,_len: number): number; 
GetAbbreviation(_buffer: string | Uint8Array,_len: number): number; 
GetNumPages(): number; 
GetPageNumber(_index: number): number; 
GetBBox(_page_num: number,_bbox: PdfRect): void; 
GetAttrObject(_index: number): PdsObject; 
AddAttrObj(_object: PdsObject): boolean; 
RemoveAttrObj(): boolean; 
GetObject(): PdsObject; 
GetChildObject(_index: number): PdsObject; 
GetChildType(_index: number): PdfStructElementType; 
GetChildPageNumber(_index: number): number; 
GetChildMcid(_index: number): number; 
GetNumAttrObjects(): number; 
GetNumChildren(): number; 
GetParentObject(): PdsObject; 
GetId(_buffer: string | Uint8Array,_len: number): number; 
SetId(_id: string | Uint8Array): boolean; 
GetLang(_buffer: string | Uint8Array,_len: number): number; 
SetLang(_alt: string | Uint8Array): boolean; 
RemoveChild(_index: number): boolean; 
MoveChild(_index: number,_dest_element: PdsStructElement,_dest_index: number): boolean; 
AddChild(_element: PdsStructElement,_index: number): boolean; 
AddNewChild(_type: string | Uint8Array,_index: number): PdsStructElement; 
AddPageObject(_object: PdsPageObject,_index: number): boolean; 
AddAnnot(_annot: PdfAnnot,_index: number): PdsStructElement; 
GetStructTree(): PdsStructTree; 
RecognizeTable(): boolean; 
GetNumRow(): number; 
GetNumCol(): number; 
GetCell(_row: number,_col: number): PdsStructElement; 
GetCellParams(_row: number,_col: number,_params: PdfCellParams): boolean; 
GetCellElemParams(_cell: PdsStructElement,_params: PdfCellParams): boolean; 
GetNumAssociatedHeaders(): number; 
GetAssociatedHeader(_index: number): PdsStructElement; 
AddAssociatedHeader(_index: number,_header: PdsStructElement,_create: boolean): boolean; 
RemoveAssociatedHeader(_index: number): boolean; 
AddAssociatedFile(_file_spec: PdsFileSpec,_index: number): boolean; 
GetNumAssociatedFiles(): number; 
GetAssociatedFile(_index: number): PdsFileSpec; 
}

interface PdsClassMap {
GetAttrObject(_class_name: string | Uint8Array,_index: number): PdsObject; 
GetNumAttrObjects(_class_name: string | Uint8Array): number; 
GetObject(): PdsDictionary; 
}

interface PdsRoleMap {
DoesMap(_src: string | Uint8Array,_dst: string | Uint8Array): boolean; 
GetDirectMap(_type: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
GetObject(): PdsDictionary; 
}

interface PdsStructTree {
GetObject(): PdsDictionary; 
GetClassMap(): PdsClassMap; 
CreateClassMap(): PdsClassMap; 
RemoveClassMap(): boolean; 
GetChildObject(_index: number): PdsObject; 
GetNumChildren(): number; 
GetRoleMap(): PdsRoleMap; 
CreateRoleMap(): PdsRoleMap; 
RemoveRoleMap(): boolean; 
GetStructElementFromObject(_object: PdsObject): PdsStructElement; 
RemoveChild(_index: number): boolean; 
AddChild(_element: PdsStructElement,_index: number): boolean; 
AddNewChild(_type: string | Uint8Array,_index: number): PdsStructElement; 
GetDoc(): PdfDoc; 
FixParentTree(): boolean; 
FixIdTree(): boolean; 
}

interface PdfConversion {
Destroy(): void; 
AddPage(_index: number): boolean; 
Save(_path: string | Uint8Array): boolean; 
SaveToStream(_stream: PsStream): boolean; 
}

interface PdfHtmlConversion extends PdfConversion {
SetParams(_params: PdfHtmlParams): boolean; 
SaveCSS(_stream: PsStream): boolean; 
SaveJavaScript(_stream: PsStream): boolean; 
AddHtml(_stream: PsStream): boolean; 
}

interface PdfJsonConversion extends PdfConversion {
SetParams(_params: PdfJsonParams): boolean; 
}

interface PdfTiffConversion extends PdfConversion {
SetParams(_params: PdfTiffParams): boolean; 
}

interface PsEvent {
GetType(): PdfEventType; 
GetDoc(): PdfDoc; 
GetPage(): PdfPage; 
GetObject(): PdsObject; 
GetFormField(): PdfFormField; 
GetProgressControl(): PsProgressControl; 
GetUndo(): PdfDocUndo; 
GetName(_buffer: string | Uint8Array,_len: number): number; 
GetIndex(): number; 
}

interface PsAuthorization {
SaveToStream(_stream: PsStream,_format: PsDataFormat): boolean; 
IsAuthorized(): boolean; 
IsAuthorizedPlatform(_platform: PdfAuthPlatform): boolean; 
IsAuthorizedOption(_option: PdfAuthOption): boolean; 
GetType(): PdfAuthorizationType; 
}

interface PsAccountAuthorization extends PsAuthorization {
Authorize(_email: string | Uint8Array,_serial_number: string | Uint8Array): boolean; 
Reset(): boolean; 
}

interface PsStandardAuthorization extends PsAuthorization {
Activate(_serial_number: string | Uint8Array): boolean; 
CreateOfflineActivationFile(_serial_number: string | Uint8Array,_activation_request_file: string | Uint8Array): boolean; 
ActivateOffline(_activation_file: string | Uint8Array): boolean; 
Deactivate(): boolean; 
DeactivateOffline(_deactivation_request_file: string | Uint8Array): boolean; 
Update(_local: boolean): boolean; 
UpdateOffline(_update_file: string | Uint8Array): boolean; 
Reset(): boolean; 
}

interface PsCommand {
LoadParamsFromStream(_params: PsStream,_format: PsDataFormat): boolean; 
Reset(): boolean; 
SaveOutputToStream(_stream: PsStream,_format: PsDataFormat,_flags: number): boolean; 
SaveCommandsToStream(_type: PsCommandType,_stream: PsStream,_format: PsDataFormat,_flags: number): boolean; 
Run(): boolean; 
}

interface PsProgressControl {
SetCancelProc(_cancel_proc: number,_cancel_data: number): boolean; 
SetData(_client_data: number): boolean; 
GetData(): number; 
StartProcess(_steps: number): number; 
EndProcess(_process_id: number): boolean; 
Step(_process_id: number): boolean; 
SetText(_text: string | Uint8Array): boolean; 
GetText(_buffer: string | Uint8Array,_len: number): number; 
GetState(): number; 
Cancel(): boolean; 
}

interface PsRenderDeviceContext {
GetType(): PsRenderDeviceType; 
}

interface PsImage {
Destroy(): void; 
Save(_path: string | Uint8Array,_params: PdfImageParams): boolean; 
SaveRect(_path: string | Uint8Array,_params: PdfImageParams,_dev_rect: PdfDevRect): boolean; 
SaveToStream(_stream: PsStream,_params: PdfImageParams): boolean; 
SaveRectToStream(_stream: PsStream,_params: PdfImageParams,_dev_rect: PdfDevRect): boolean; 
GetPointColor(_point: PdfDevPoint,_color: PdfRGB): void; 
SaveDataToStream(_stream: PsStream): boolean; 
}

interface PsSysFont {
Destroy(): void; 
}

interface Pdfix {
Destroy(): void; 
GetAuthorization(): PsAuthorization; 
GetStandardAuthorization(): PsStandardAuthorization; 
GetAccountAuthorization(): PsAccountAuthorization; 
GetErrorType(): number; 
GetError(): string; 
GetErrorDescription(): string; 
SetError(_type: number,_error: string,DOMString: [Const]): void; 
GetProductName(): string; 
GetProductUrl(): string; 
GetVersionMajor(): number; 
GetVersionMinor(): number; 
GetVersionPatch(): number; 
CreateDoc(): PdfDoc; 
OpenDoc(_path: string | Uint8Array,_password: string | Uint8Array): PdfDoc; 
OpenDocFromStream(_stream: PsStream,_password: string | Uint8Array): PdfDoc; 
CreateDigSig(): PdfDigSig; 
CreateCustomDigSig(): PdfCustomDigSig; 
CreateStandardSecurityHandler(_user_password: string | Uint8Array,_owner_password: string | Uint8Array,_params: PdfStandardSecurityParams): PdfStandardSecurityHandler; 
CreateCustomSecurityHandler(_name: string | Uint8Array,_client_data: number): PdfCustomSecurityHandler; 
RegisterSecurityHandler(_proc: PdfSecurityCreateHandlerProc,_name: string | Uint8Array,_client_data: number): boolean; 
RegisterAnnotHandler(_type: string | Uint8Array): PdfAnnotHandler; 
RegisterActionHandler(_type: string | Uint8Array): PdfActionHandler; 
CreateRegex(): PsRegex; 
CreateFileStream(_path: string | Uint8Array,_mode: PsFileMode): PsFileStream; 
CreateMemStream(): PsMemoryStream; 
CreateCustomStream(_read_proc: PsStreamReadProc,_client_data: number): PsCustomStream; 
ReadImageInfo(_image_stream: PsStream,_format: PdfImageFormat,_info: PsImageInfo): boolean; 
CreateImage(_width: number,_height: number,_format: PsImageDIBFormat): PsImage; 
CreateRenderDeviceContext(_device: number,_type: PsRenderDeviceType): PsRenderDeviceContext; 
RegisterPlugin(_plugin: PdfixPlugin,_name: string | Uint8Array): boolean; 
GetPluginByName(_name: string | Uint8Array): PdfixPlugin; 
GetEvent(): PsEvent; 
FindSysFont(_font_family: string | Uint8Array,_font_flags: number,_codepage: PdfFontCodepage): PsSysFont; 
LoadSettingsFromStream(_settings: PsStream,_format: PsDataFormat): boolean; 
GetTags(_version: number,_buffer: string | Uint8Array,_len: number): number; 
GetSysFonts(_buffer: string | Uint8Array,_len: number): number; 
GetRtlText(_text: string | Uint8Array,_buffer: string | Uint8Array,_len: number): number; 
}

interface PdfixPlugin {
Destroy(): void; 
Initialize(_pdfix: Pdfix): boolean; 
GetVersionMajor(): number; 
GetVersionMinor(): number; 
GetVersionPatch(): number; 
GetPdfixVersionMajor(): number; 
GetPdfixVersionMinor(): number; 
GetPdfixVersionPatch(): number; 
GetPdfix(): Pdfix; 
}

interface Util {
base64_enc(buffer: string | Uint8Array,size: number): string; 
}

interface PdfixSdk {
_malloc(length: number): number;
_free(ptr: number): void;
wrapPointer(ptr: number, Class: any): any;
allocArray(typedArray: Uint8Array): [buffer: number, size: number];
allocString(string: string): [buffer: number, size: number];
GetPdfix(): Pdfix;

PdfPoint: { new(): PdfPoint; };
PdfDevPoint: { new(): PdfDevPoint; };
PdfRect: { new(): PdfRect; };
PdfDevRect: { new(): PdfDevRect; };
PdfQuad: { new(): PdfQuad; };
PdfDevQuad: { new(): PdfDevQuad; };
PdfMatrix: { new(): PdfMatrix; };
PdfGray: { new(): PdfGray; };
PdfRGB: { new(): PdfRGB; };
PdfCMYK: { new(): PdfCMYK; };
PdfColorState: { new(): PdfColorState; };
PdeColorState: { new(): PdeColorState; };
PdfTextState: { new(): PdfTextState; };
PdfGraphicState: { new(): PdfGraphicState; };
PdeGraphicState: { new(): PdeGraphicState; };
PdfFontState: { new(): PdfFontState; };
PdfPageRenderParams: { new(): PdfPageRenderParams; };
PdfTiffParams: { new(): PdfTiffParams; };
PdfAnnotAppearance: { new(): PdfAnnotAppearance; };
PdfBookmarkAppearance: { new(): PdfBookmarkAppearance; };
PdfWhitespaceParams: { new(): PdfWhitespaceParams; };
PdfMediaQueryParams: { new(): PdfMediaQueryParams; };
PdfImageParams: { new(): PdfImageParams; };
PdfTagsParams: { new(): PdfTagsParams; };
PdsContentParams: { new(): PdsContentParams; };
PdfStandardSecurityParams: { new(): PdfStandardSecurityParams; };
PdfHtmlParams: { new(): PdfHtmlParams; };
PdfJsonParams: { new(): PdfJsonParams; };
PsImageInfo: { new(): PsImageInfo; };
PdfCellParams: { new(): PdfCellParams; };
Util: { new(): Util; };
}

}